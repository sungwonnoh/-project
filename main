#include <SFML/Graphics.hpp>
#include <iostream>
#include <string>
#include <vector>
#include <time.h>
#include <cmath>
#include <windows.h>
#include <iomanip>
#include <cstdlib>
#include <ctime>
#include <vector>
#include "Item.h"


using namespace std;
using namespace sf;


class MyRect {

public:

    RectangleShape rect;

    MyRect(double posX, double posY, double width, double height, double angle, const Color& mycolor) {

        rect.setPosition(posX , posY ); //사각형의 왼쪽 좌상단의 좌표를 지정
        rect.setSize(Vector2f(width, height)); //width, height (가로, 세로)
        rect.setRotation(angle);//왼쪽 좌상단이 각의 꼭짓점이 되고, 시계방향으로 회전
        rect.setFillColor(mycolor);
    }
};


int main()
{
    int nX = 1000; //게임 창 크기 조정
    int nY = 800;
    RenderWindow window(VideoMode(nX, nY), "Fortress");


    window.setFramerateLimit(100);


    //대포 가로세로  
    double width = 30;
    double height = 90;

    MyRect myrect{ width, (double)nY, width, height, 225.0 , Color::Blue }; //대포 생성(나타날 x좌표, y좌표, 가로, 세로, 각도, 색)

    //default값, 변수를 선언하여 일일이 수정할 필요 없이 한번에 수정할 수 있도록 
    float defaultPower = 2;
    float power = defaultPower;
    float maxPower = 12;
    float currentangle = 270 - myrect.rect.getRotation(); //생각하기 쉽도록 각도 조정
    float vx = power * cos(currentangle * 3.14 / 180); //x방향 속도
    float vy = -power * sin(currentangle * 3.14 / 180);//y방향 속도

    int col = 0;
    //색깔변수 선언
    //col = 0 -> 빨강(포탄 +1)
    //col = 1 -> 파랑(포탄 -1)
    //col = 2 -> 초록(레이저 아이템)
    //col = 3 -> 노랑(그냥 점수만)

    //아이템 구체 12개 동적 배열 선언
    vector<Item> item(12);

    //아이템 삭제 함수
    auto removeItem = [&](int index) {
        if (index >= 0 && index < item.size()) {
            item.erase(item.begin() + index);
        }
    };

    //아이템 위치 조정 & 색깔 랜덤 지정
    srand((unsigned int)::time(NULL));
    for (int i = 0; i < 12; i++) {

        if (i <= 3) {
            item[i].setPosition(900 * 5 / 8, 160 * (i + 1));
        }
        else if (i <= 7) {
            item[i].setPosition(900 * 6 / 8, 160 * (i - 3));
        }
        else {
            item[i].setPosition(900 * 7 / 8, 160 * (i - 7));
        }

        col = rand() % 4; //랜덤으로 0~3수 생성
        if (col == 0) {
            item[i].setColor(Color::Red);
        }
        else if (col == 1) {
            item[i].setColor(Color::Blue);
        }
        else if (col == 2) {
            item[i].setColor(Color::Green);
        }
        else {
            item[i].setColor(Color::Yellow);
        }
    }
    //빨강 - 포탄+1, 파랑 - 포탄-1, 초록 - 레이저, 노랑 - 일반 점수


    //어차피 포탄도 아이템도 원이기 때문에 Item클래스로 선언
    Item bullet{ 0,0,0,Color::Black };
    //포탄을 생성자로 초기화(처음 켰을때 안보이게)

    int defaultBullet = 5;
    int bulletCount = defaultBullet;
    bool isFired = false;
    bool isLaser = false;


    Text text;
    Text ammoText; //남은 포탄 개수 표시할 텍스트
    Text score; 

    Font font;

    int t = 0;
    int sc = 0; //점수

    int laserBulletCount = 0;//레이저 발사횟수를 저장하는 변수 추가;

    if (!font.loadFromFile("D:\\works\\sfml_ex\\arial.ttf")) { //E:\\works\\practice\\ch7\\x64\\Debug
        return 42; // Robust error handling!
    }

    text.setFont(font);
    ammoText.setFont(font);
    score.setFont(font);

    text.setString(to_string(t) + " sec");
    ammoText.setString(to_string(bulletCount) + "left");
    score.setString("score : " + to_string(sc));

    text.setCharacterSize(30);
    ammoText.setCharacterSize(30);
    score.setCharacterSize(30);

    text.setFillColor(Color::Blue);
    ammoText.setFillColor(Color::White);
    score.setFillColor(Color::Red);

    text.setPosition(0, 0);
    ammoText.setPosition(0, 30);
    score.setPosition(0, 60);

    clock_t time = clock();


    // 여기서부터 게임 루프
    while (window.isOpen())
    {


        // 이벤트 검사 및 처리
        Event e;

        while (window.pollEvent(e)) {

            if (e.type == Event::Closed)

                window.close();

        }

        if (Keyboard::isKeyPressed(Keyboard::Up)) {

            myrect.rect.rotate(-1);
            currentangle = 270 - myrect.rect.getRotation(); //각도 업데이트

        }

        else if (Keyboard::isKeyPressed(Keyboard::Down)) {

            myrect.rect.rotate(+1);
            currentangle = 270 - myrect.rect.getRotation(); //각도 업데이트

        }

        if (Keyboard::isKeyPressed(Keyboard::Space)) {
            //누르고 있는 동안 power 점차 증가
            Sleep(10);

            //최대 파워
            if (power < maxPower) {
                power += 0.1;
                cout << fixed << setprecision(1) << "power: " << power << endl; //소수점 첫째자리까지 출력
            }
            else {
                cout << "max power" << endl;
            }
        }
        else {
            power = defaultPower; //스페이스바 눌렀다 떼면 power 초기화
        }


        if (Keyboard::isKeyPressed(Keyboard::Space) && Keyboard::isKeyPressed(Keyboard::F)) {
            // f랑 스페이스바 동시에 누르면 발사

            Sleep(500); //중복 입력 방지

            //포탄 개수 여부에 따라 발사
            if (bulletCount) {
                isFired = true;

                //대포 위치에 따른 포탄 위치 초기화 (수업시간에 배웠던 -> 사용)
                bullet.getCircleShape()->setRadius(width / 2);
                bullet.getCircleShape()->setPosition(myrect.rect.getPosition().x + cos(currentangle * 3.14 / 180) * height - sin(currentangle * 3.14 / 180) * width,
                    myrect.rect.getPosition().y - sin(currentangle * 3.14 / 180) * height - cos(currentangle * 3.14 / 180) * width);
                bullet.getCircleShape()->setFillColor(Color::White);

                //업데이트됐던 각도에 따라 vx,vy 초기화
                vx = power * cos(currentangle * 3.14 / 180);
                vy = -power * sin(currentangle * 3.14 / 180);
                bulletCount -= 1;
                cout << bulletCount << " ammo left" << endl;
            }
            else {
                isLaser = false;
                laserBulletCount = 0;
                cout << "No Ammo" << endl;
            }
        }

        //충돌 감지 시스템 & 아이템에 따른 효과 적용
        for (int i = 0; i < item.size(); i++) {

            int collisionResult = bullet.collisionTest(item[i]); //bullet.collisionTest()는 충돌한 아이템의 색깔에 따른 정수를 반환함

            if (collisionResult == 3) { // green
                laserBulletCount += 1;//레이저발사횟수 초기화
                sc += 50;
                removeItem(i);
            }
            else if (collisionResult == 1) {// red
                //1일때 포탄 수 1개 늘리기
                bulletCount++;
                sc += 50;
                removeItem(i);
            }
            else if (collisionResult == 2) {//blue
                //2일때 포탄 수 1개 줄이기
                if (bulletCount > 0) {
                    bulletCount--;
                }
                else {
                    sc -= 100; //포탄을 다 사용했는데도 파란색(포탄-1)과 충돌하면 점수 감점
                }
                removeItem(i);
            }
            else if (collisionResult == 4) {//yellow
                //4일때 점수 추가
                sc += 100;
                removeItem(i);
            }
        }

        //레이저 상태일 때 발사한 경우
        if (isFired && isLaser) {

            Sleep(10); //100프레임으로 움직임

            bullet.getCircleShape()->move(vx, vy);


            //포탄이 화면 벗어나면 초기화 & 래이저 상태 적용 유무
            if (bullet.getCircleShape()->getPosition().y > window.getSize().y || bullet.getCircleShape()->getPosition().x > window.getSize().x) {
                isFired = false;
                power = defaultPower;
                myrect.rect.setPosition(width, (double)nY);

                cout << "Laser ammo : " << laserBulletCount << endl;
                if (laserBulletCount != 0) {
                    // 레이저 발사 횟수 감소
                    isLaser = true; //3번일때 레이저
                    cout << "Entering laser mode" << endl;
                }
                if (laserBulletCount == 0) {
                    isLaser = false;
                    cout << "Exiting laser mode" << endl;
                }
                laserBulletCount--;

            }

        }
        //일반 상태일 때 발사한 경우
        else if (isFired) {

            Sleep(10); //100프레임으로 움직임
            vy += 0.1; //중력 고려

            bullet.getCircleShape()->move(vx, vy);

            //포탄이 화면 벗어나면 초기화 & 레이저 상태 적용 유무
            if (bullet.getCircleShape()->getPosition().y > window.getSize().y || bullet.getCircleShape()->getPosition().x > window.getSize().x) {
                isFired = false;
                power = defaultPower;
                myrect.rect.setPosition(width, (double)nY);

                //일반 상태로 발사했을 때 레이저 아이템을 먹은 경우
                if (laserBulletCount > 0) {
                    laserBulletCount--;  // 레이저 발사 횟수 미리 감소
                    isLaser = true; //다음 발사를 위해 레이저 효과 적용
                    cout << "Entering laser mode" << endl;
                }
            }
        }


        time = clock();

        time = time / CLOCKS_PER_SEC;
        text.setString(to_string(time) + " sec");

        //남은 포탄 표시
        if (bulletCount) {
            ammoText.setString(to_string(bulletCount) + " ammo left");
        }
        else {
            ammoText.setString("No ammo");
        }

        score.setString("Score: " + to_string(sc));


        // 화면을 지운다. 
        window.clear();


        window.draw(*bullet.getCircleShape()); //*를 써서 역참조


        window.draw(myrect.rect);

        window.draw(text);
        window.draw(ammoText);

        for (int i = 0; i < item.size(); i++) {
            window.draw(*item[i].getCircleShape());
        }

        window.draw(score);

        // 화면을 표시한다. 

        window.display();

    }

    return 0;
}
