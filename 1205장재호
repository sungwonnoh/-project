#include <SFML/Graphics.hpp>
#include <iostream>
#include <string>
#include <vector>
#include <time.h>
#include <cmath>
#include <windows.h>

using namespace std;
using namespace sf;

class MyCircle {

	double x, y, radius;

public:
	MyCircle(double x = 0, double y = 0, double radius = 10) : x{ x }, y{ y }, radius{ radius } {}
	void setX(double x) { this->x = x; }
	void setY(double y) { this->y = y; }
	void setR(double radius) { this->radius = radius; }
	double getX() { return this->x; }
	double getY() { return this->y; }
	double getR() { return this->radius; }

	bool collisionTest(MyCircle obj);
};

bool MyCircle::collisionTest(MyCircle obj) {

	int distance = sqrt(pow(x - obj.getX(), 2) + pow(y - obj.getY(), 2));

	if (distance < radius + obj.getR()) {
		return true;
	}
	else {
		return false;
	}

}

class MyRect {
public:

	RectangleShape rect;

	MyRect(double posX, double posY, double angle, const Color& mycolor) {
		rect.setPosition(posX, posY); //사각형의 왼쪽 좌상단의 좌표를 지정
		rect.setSize(Vector2f(20, 60)); //width, height (가로, 세로)
		rect.setRotation(angle);//왼쪽 좌상단이 각의 꼭짓점이 되고, 시계방향으로 회전
		rect.setFillColor(mycolor);
	}




};



int main()
{
	int nX = 1000; //크기 조정
	int nY = 500;

	RenderWindow window(VideoMode(nX, nY), "Fortress");


	window.setFramerateLimit(100);


	double radius = 10;
	double diameter = radius * 2;
	double posX = 0;
	double posY = nY - diameter;
	double velocity = 10;

	MyRect myrect{ 20.0, (double)nY, 225.0 , Color::Blue };

	MyCircle a{ posX,posY,radius };
	MyCircle b{ 140,140,10 };

	CircleShape circle(a.getR()); //반지름
	CircleShape circle1(b.getR());

	circle.setPosition(a.getX(), a.getY());
	circle.setFillColor(Color(255, 0, 0));
	circle.setPointCount(50);


	circle1.setPosition(b.getX(), b.getY());
	circle1.setFillColor(Color(150, 0, 0));
	circle1.setPointCount(50);

	Text text;
	Font font;

	int t = 0;

	if (!font.loadFromFile("C:\\Users\\Wyvern\\source\\repos\\sfml\\sfml\\arial.ttf")) { //E:\\works\\practice\\ch7\\x64\\Debug
		return 42; // Robust error handling!
	}

	text.setFont(font);

	text.setString(to_string(t) + " sec");

	text.setCharacterSize(20);

	text.setFillColor(Color::Blue);

	text.setPosition(0, 0);

	clock_t time = clock();


	// 여기서부터 게임 루프
	while (window.isOpen())
	{



		// 이벤트 검사 및 처리
		Event e;

		while (window.pollEvent(e)) {

			if (e.type == Event::Closed)

				window.close();

		}

		if (a.collisionTest(b))
			cout << "True" << endl;
		else
			cout << "False" << endl;


		if (Keyboard::isKeyPressed(Keyboard::Up)) {

			//cout << "up" << endl;

			myrect.rect.rotate(-1);


		}

		else if (Keyboard::isKeyPressed(Keyboard::Down)) {

			//cout << "down" << endl;


			myrect.rect.rotate(+1);


		}

		if (Keyboard::isKeyPressed(Keyboard::Left)) {

			//cout << "left" << endl;

			circle.move(-velocity, 0);
			a.setX(a.getX() - velocity);

		}

		else if (Keyboard::isKeyPressed(Keyboard::Right)) {

			//cout << "right" << endl;

			circle.move(velocity, 0);
			a.setX(a.getX() + velocity);

		}


		if (Keyboard::isKeyPressed(Keyboard::Space)) {

			//발사
			Sleep(1000);

			for (int dt = 0; dt < 10; dt++) {
				float currentangle = myrect.rect.getRotation();
				myrect.rect.move(-velocity * sin(currentangle * 3.14 / 180), velocity * cos(currentangle * 3.14 / 180));
			}

			
			

		}



		//circle.move(velX, velY);



		time = clock();

		time = time / CLOCKS_PER_SEC;
		text.setString(to_string(time) + " sec");



		// 화면을 지운다. 

		window.clear();



		// 화면에 원을 그린다. 

		window.draw(circle);
		window.draw(circle1);

		window.draw(myrect.rect);

		window.draw(text);



		// 화면을 표시한다. 

		window.display();

	}

	return 0;

}
